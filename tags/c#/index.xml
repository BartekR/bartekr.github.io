<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on BartekR</title>
    <link>https://blog.bartekr.net/tags/c#/</link>
    <description>Recent content in C# on BartekR</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 28 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.bartekr.net/tags/c#/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>End-to-End testing with Playwright, part II</title>
      <link>https://blog.bartekr.net/2021/11/28/end-to-end-testing-with-playwright-part-ii/</link>
      <pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bartekr.net/2021/11/28/end-to-end-testing-with-playwright-part-ii/</guid>
      <description>In the first part I created a sample Blazor app, installed Playwright and created first test. This post is to get more comfortable with Playwright.
Getting more familiar Just to recall the test I wrote (validation of the element on a /counter web page):
using Microsoft.Playwright.NUnit; using System.Threading.Tasks; namespace BlazorApp.Tests; class MainPageTests : PageTest { public async Task CounterStartsWithZero() { // call to the `/counter` page  await Page.GotoAsync(&amp;#34;http://localhost:5165/counter&amp;#34;); // search for the counter value  var content = await Page.</description>
    </item>
    
    <item>
      <title>End-to-End testing with Playwright, part I</title>
      <link>https://blog.bartekr.net/2021/11/13/end-to-end-testing-with-playwright-part-i/</link>
      <pubDate>Sat, 13 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bartekr.net/2021/11/13/end-to-end-testing-with-playwright-part-i/</guid>
      <description>I started working with Playwright by accident. YouTube has shown me a recommendation - a short film by Nick Chapsas (yt | t) about testing user interfaces with SpecFlow and Playwright. While I admire the SpecFlow, BDD and Gherkin ideas - I still haven&amp;rsquo;t convinced myself to use them. But Playwright + C# have drawn my attention. Then I found a webinar recording with Andrey Lushnikov, and I was sold on Playwright.</description>
    </item>
    
    <item>
      <title>Adding a new Task in TFS using C#</title>
      <link>https://blog.bartekr.net/2020/05/04/adding-a-new-task-in-tfs-using-c/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bartekr.net/2020/05/04/adding-a-new-task-in-tfs-using-c/</guid>
      <description>An assignment: using data from the Excel file (sample data below) insert them into TFS (on-premises). Automatically. Start. You have three months from now. Or a few hours.
The original spreadsheet contains 16 records - the header and 15 tasks with 11 columns (skipped here, 8 is enough).
   Work item type Title Activity Area Path Assigned To Description Original Estimate Completed Work     Task Title1 Requirements Proj1\Team1 P Name1 Description 1 10 10   Task Title2 Maintenance Proj1\Team1 P Name2 Description 2 5 5    Additionally, the tasks should be assigned to the designated User Story: http://tfsserveraddress/tfs/CollectionName/ProjectName/_workitems/edit/12345 and the Sprint &amp;quot;\Current\Sprint 3&amp;quot;.</description>
    </item>
    
  </channel>
</rss>
